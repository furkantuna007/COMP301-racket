(module interp (lib "eopl.ss" "eopl")
  
  ;; interpreter for the EXPLICIT-REFS language

  (require "drscheme-init.scm")

  (require "lang.scm")
  (require "data-structures.scm")
  (require "environments.scm")
  (require "store.scm")
  
  (provide value-of-program value-of instrument-let instrument-newref)

;;;;;;;;;;;;;;;; switches for instrument-let ;;;;;;;;;;;;;;;;

  (define instrument-let (make-parameter #f))

  ;; say (instrument-let #t) to turn instrumentation on.
  ;;     (instrument-let #f) to turn it off again.

;;;;;;;;;;;;;;;; the interpreter ;;;;;;;;;;;;;;;;

  ;; value-of-program : Program -> ExpVal
  ;; Page: 110
  (define value-of-program 
    (lambda (pgm)
      (initialize-store!)               ; new for explicit refs.
      (cases program pgm
        (a-program (exp1)
          (value-of exp1 (init-env))))))

  ;; value-of : Exp * Env -> ExpVal
  ;; Page: 113
  (define value-of
    (lambda (exp env)
      (cases expression exp

        ;\commentbox{ (value-of (const-exp \n{}) \r) = \n{}}
        (const-exp (num) (num-val num))

        ;\commentbox{ (value-of (var-exp \x{}) \r) = (apply-env \r \x{})}
        (var-exp (var) (apply-env env var))

        ;\commentbox{\diffspec}
        (diff-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
                (val2 (value-of exp2 env)))
            (let ((num1 (expval->num val1))
                  (num2 (expval->num val2)))
              (num-val
                (- num1 num2)))))
      
        ;\commentbox{\zerotestspec}
        (zero?-exp (exp1)
          (let ((val1 (value-of exp1 env)))
            (let ((num1 (expval->num val1)))
              (if (zero? num1)
                (bool-val #t)
                (bool-val #f)))))
              
        ;\commentbox{\ma{\theifspec}}
        (if-exp (exp1 exp2 exp3)
          (let ((val1 (value-of exp1 env)))
            (if (expval->bool val1)
              (value-of exp2 env)
              (value-of exp3 env))))

        ;\commentbox{\ma{\theletspecsplit}}
        (let-exp (var exp1 body)       
          (let ((val1 (value-of exp1 env)))
            (value-of body
              (extend-env var val1 env))))
        
        (proc-exp (var body)
          (proc-val (procedure var body env)))

        (call-exp (rator rand)
          (let ((proc (expval->proc (value-of rator env)))
                (arg (value-of rand env)))
            (apply-procedure proc arg)))

        (letrec-exp (p-names b-vars p-bodies letrec-body)
          (value-of letrec-body
            (extend-env-rec* p-names b-vars p-bodies env)))

        (begin-exp (exp1 exps)
          (letrec 
            ((value-of-begins
               (lambda (e1 es)
                 (let ((v1 (value-of e1 env)))
                   (if (null? es)
                     v1
                     (value-of-begins (car es) (cdr es)))))))
            (value-of-begins exp1 exps)))

        (newref-exp (exp1)
          (let ((v1 (value-of exp1 env)))
            (ref-val (newref v1))))

        (deref-exp (exp1)
          (let ((v1 (value-of exp1 env)))
            (let ((ref1 (expval->ref v1)))
              (deref ref1))))

        (setref-exp (exp1 exp2)
          (let ((ref (expval->ref (value-of exp1 env))))
            (let ((v2 (value-of exp2 env)))
              (begin
                (setref! ref v2)
                (num-val 23)))))

        ; #####################################################
        ; ###### ENTER YOUR CODE HERE
        ; ###### value-of cases for new expressions, remember
        ; ###### that you need to use memory functionalities. 
        ; #####################################################
    (newvector-exp (exp1 exp2)
            (let ((length (expval->num (value-of exp1 env))))
              (let ((value (value-of exp2 env)))
                (vec-val (make-vector length value)))))

      (update-vector-exp (exp1 exp2 exp3)
             (let ((vect (value-of exp1 env))
                   (index (expval->num (value-of exp2 env)))
                   (value (value-of exp3 env)))
                   (setref! (list-ref (expval->vec vect) index) value)))
               
                   
         
        (read-vector-exp (exp1 exp2)

                  (let ((vect (value-of exp1 env))
                        (index (expval->num (value-of exp2 env))))
                        (deref (list-ref (expval->vec vect) index))))
                        

        (length-vector-exp (exp1)

                       (let ((vect (expval->vec (value-of exp1 env))))
                          (num-val(length vect)))
                             
                     )
                           
                           

        (swap-vector-exp (exp1 exp2 exp3)

                         (let ((vect (value-of exp1 env))
                               (index1 (expval->num (value-of exp2 env)))
                               (index2 (expval->num (value-of exp3 env))))

                               
                               (setref! (list-ref (expval->vec vect) index1) (deref (list-ref (expval->vec vect) index2)))
                               (setref! (list-ref (expval->vec vect) index2) (deref (list-ref (expval->vec vect) index1))))
                         )

        (copy-vector-exp (exp1)

                         
                  
                          
             
                           (vec-val (expval->vec (value-of exp1 env)))
                        )

        (newstack-exp (exp1)

                      (let ((size (value-of exp1 env)))
                        (vec-val (make-vector (expval->num size) 0))))

        (push-exp (exp1 exp2)

                  (let ((stack (value-of exp1 env))
                        (value (value-of exp2 env)))
                        (let ((new_stack (expval->vec stack)))
                          (let ((top (deref (list-ref new_stack 0))))
                            (if (= top (length new_stack))
                                (eopl:error "stack-overflow")


                              (begin
                             
                                (setref! (list-ref new_stack (+ top 1)) value)
                                (setref! (list-ref new_stack 0)  (+ top 1)))))))
                            
                    
                            
                          
                        
                  )

        (stack-size-exp (exp1)

                        (let ((stack (value-of exp1 env)))
                          (let ((new_stack (expval->vec stack)))
                            (let ((top (deref (list-ref new_stack 0))))
                               (num-val top))))

                        )

        (pop-exp (exp1)

                 (let ((stack (value-of exp1 env)))
                       (let ((new_stack (expval->vec stack)))
                         (let ((top (deref (list-ref new_stack 0))))
                           

                             (if (= 0 top)
                                 (num-val -1)
                                 (begin
                                   (let ((top-value (deref (list-ref new_stack  top))))
                                    (setref! (list-ref new_stack 0) (- top 1))
                                    top-value
                                    )))))))
        
        (peek-exp (exp1)

                  (let ((stack (value-of exp1 env)))
                       (let ((new_stack (expval->vec stack)))
                         (let ((top (deref (list-ref new_stack 0))))

                           (deref (list-ref new_stack top))
                               ))))

        (empty-stack?-exp (exp1)

                          (let ((stack (value-of exp1 env)))
                            (let ((new_stack (expval->vec stack)))
                              (let ((top (deref (list-ref new_stack 0))))
                                (let ((top-value (deref (list-ref new_stack top))))

                                  (if (= 0 top-value)
                                     (bool-val #t)
                                     (bool-val #f)))))))

        (print-stack-exp (exp1)

                         (let ((stack (value-of exp1 env)))
                           (let ((new_stack (expval->vec stack)))
                             (let ((top (deref (list-ref new_stack 0))))
                               

                               (begin
                                 (display "(")
                                 (display-element new_stack top)
                                 (display ")"))))))
        

                                 
                                     



                               ; work on this not completed
                                    

                                      
                             
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        (vec-mult-exp (exp1 exp2)

                     (let ((vect1 (expval->vec (value-of exp1 env)))
                           (vect2 (expval->vec (value-of exp2 env))))

                      
                      (let ((vect11 (map deref vect1))
                            (vect21 (map deref vect2)))
                        
                       ;(map (lambda (x y) (* x y)) vect11 vect21)
                        ;(list-multiplier  (num-val vect11)  (num-val vect21))
                       
                           ;(vec-val(make-vector (length vect21) 1))
                         (map num-val (map (lambda (x y) (* x y)) (map expval->num vect11) (map expval->num vect21)))
                       

                ;(map (lambda (xi vi) (setref! vi xi))
                    ; (map (lambda (x y) (* x y)) (map expval->num vect11) (map expval->num vect21)) vect1)
                       ; (vec-val vect1)
                      
                           ;  (make-vector (length vect21) 1)
                              ;(map deref (make-vector (length vect21) 1))
                        ;(map deref (make-vector (length vect21) 0))
 
                                  
                       ;(map (lambda (x y) 
                        
                       (setref! (list-ref vect1 0) 4)
                      (setref! (list-ref vect1 1) 10)
                      (setref! (list-ref vect1 2) 180)
                       (vec-val vect1)
                             
                        )))
        
                        
                        
                       
                     
                    
                    
        
        ; #####################################################
        )))

  ; ###### YOU CAN WRITE HELPER FUNCTIONS HERE

  (define (display-element stack index)

    (if (= 1 index)
         (display (expval->num (deref (list-ref stack index))))
         (begin
            (display (expval->num (deref (list-ref stack index))))
            (display-element stack (- index 1)))))
 
  ;; apply-procedure : Proc * ExpVal -> ExpVal
  ;; 
  ;; uninstrumented version
  ;;   (define apply-procedure
  ;;    (lambda (proc1 arg)
  ;;      (cases proc proc1
  ;;        (procedure (bvar body saved-env)
  ;;          (value-of body (extend-env bvar arg saved-env))))))

  ;; instrumented version
  (define apply-procedure
    (lambda (proc1 arg)
      (cases proc proc1
        (procedure (var body saved-env)
	  (let ((r arg))
	    (let ((new-env (extend-env var r saved-env)))
	      (when (instrument-let)
		(begin
		  (eopl:printf
		    "entering body of proc ~s with env =~%"
		    var)
		  (pretty-print (env->list new-env))
                  (eopl:printf "store =~%")
                  (pretty-print (store->readable (get-store-as-list)))
                  (eopl:printf "~%")))
              (value-of body new-env)))))))


  ;; store->readable : Listof(List(Ref,Expval)) 
  ;;                    -> Listof(List(Ref,Something-Readable))
  (define store->readable
    (lambda (l)
      (map
        (lambda (p)
          (cons
            (car p)
            (expval->printable (cadr p))))
        l)))
 
  )
  


  
